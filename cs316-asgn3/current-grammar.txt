program:
	declaration_list procedure_definition
;

declaration_list:
	procedure_declaration
|
	variable_declaration_list procedure_declaration
|
	procedure_declaration variable_declaration_list
;

procedure_declaration:
	VOID NAME '(' ')' ';'
;

procedure_definition:
	NAME '(' ')'
	'{' optional_variable_declaration_list statement_list '}'
;

optional_variable_declaration_list:
	/* empty */
|
	variable_declaration_list
;

variable_declaration_list:
	variable_declaration
|
	variable_declaration_list variable_declaration
;

variable_declaration:
	declaration ';'
;

declaration:
	INTEGER var_list
|
	FLOAT var_list

;

var_list:
	NAME
	|
	var_list ',' NAME

statement_list:
|
	statement_list statement
;

// include '{' statement_list '}'  in statement

statement:
	
	assignment_statement 

	|

	'{' statement_list '}'

	|


	WHILE '(' boolean_expr ')' statement

	|

	IF '(' boolean_expr ')' THEN statement

	|

	IF '(' boolean_expr ')' THEN statement ELSE statement

	|

	DO statement WHILE '(' boolean_expr ')'
	;


assignment_statement:

	variable ASSIGN arith_expression ';'
  


;




arith_expression:
	arith_expression '+' arith_expression
|
	arith_expression '-' arith_expression
|
	arith_expression '*' arith_expression
|
	arith_expression '/' arith_expression
|
	'-' arith_expression %prec UMINUS
|
	'(' arith_expression ')'
|
	expression_term
;


boolean_expr:
	boolean_expr OR boolean_expr
|
	boolean_expr AND boolean_expr

|
	NOT boolean_expr 
|
	'(' boolean_expr ')'
|
	relational_expr
;

relational_expr:

	arith_expression '<' arith_expression 

	|

	arith_expression '>' arith_expression 

	|

	arith_expression '<=' arith_expression 

	|

	arith_expression '>=' arith_expression 

	|

	arith_expression '==' arith_expression 

	|

	arith_expression '!=' arith_expression 


;



expression_term:
	variable
|
	constant
;

variable:
	NAME
;

constant:
	INTEGER_NUMBER
|
	DOUBLE_NUMBER

;
