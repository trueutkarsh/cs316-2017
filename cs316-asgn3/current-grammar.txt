program:
	declaration_list procedure_definition
;

declaration_list:
	procedure_declaration
|
	variable_declaration_list procedure_declaration
|
	procedure_declaration variable_declaration_list
;

procedure_declaration:
	VOID NAME '(' ')' ';'
;

procedure_definition:
	NAME '(' ')'
	'{' optional_variable_declaration_list statement_list '}'
;

optional_variable_declaration_list:
	/* empty */
|
	variable_declaration_list
;

variable_declaration_list:
	variable_declaration
|
	variable_declaration_list variable_declaration
;

variable_declaration:
	declaration ';'
;

declaration:
	INTEGER NAME
|
	FLOAT NAME

;


statement_list:
|
	statement_list statement
;


statement:
	
	assignment_statement 

	|

	WHILE '(' condn_expr ')' '{' statement_list '}'

	|

	IF '(' condn_expr ')' statement

	|

	IF '(' condn_expr ')' '{' statement_list '}' ELSE '{' statement_list '}'

	|

	DO '{' statement_list '}' WHILE '(' condn_expr ')'

	|

	variable ASSIGN boolean_expr '?' expression ':'
 expression ';'  
	;


assignment_statement:

	variable ASSIGN expression ';'

;


expression :

	arith_expression 
	
	|

	boolean_expr ;



arith_expression:
	arith_expression '+' arith_expression
|
	arith_expression '-' arith_expression
|
	arith_expression '*' arith_expression
|
	arith_expression '/' arith_expression
|
	'-' arith_expression %prec UMINUS
|
	'(' arith_expression ')'
|
	expression_term
;


boolean_expr:
	boolean_expr OR boolean_expr
|
	boolean_expr AND boolean_expr

|
	NOT boolean_expr 
|
	'(' boolean_expr ')'
|
	relational_expr
;

relational_expr:

	expr '<' expr 

	|

	expr '>' expr 

	|

	expr '<=' expr 

	|

	expr '>=' expr 

	|

	expr '==' expr 

	|

	expr '!=' expr 


;



expression_term:
	variable
|
	constant
;

variable:
	NAME
;

constant:
	INTEGER_NUMBER
|
	DOUBLE_NUMBER

;
