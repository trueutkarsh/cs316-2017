[parser.yy (info)] Line 879: 
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  declaration_list procedure_definition
2: declaration_list ->  procedure_declaration
3: declaration_list ->  variable_declaration_list procedure_declaration
4: declaration_list ->  procedure_declaration variable_declaration_list
5: procedure_declaration (VOID) ->  VOID NAME '(' ')' ';'
6: procedure_definition (NAME) ->  NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 statement_list '}'
7: #0001 ->  <empty>
8: #0002 ->  <empty>
9: optional_variable_declaration_list ->  <empty>
10: optional_variable_declaration_list ->  variable_declaration_list
11: variable_declaration_list ->  variable_declaration
12: variable_declaration_list ->  variable_declaration_list variable_declaration
13: variable_declaration (';') ->  declaration ';'
14: declaration (INTEGER) ->  INTEGER var_list
15: declaration (FLOAT) ->  FLOAT var_list
16: var_list (NAME) ->  NAME
17: var_list (',') ->  var_list ',' NAME
18: statement_list ->  <empty>
19: statement_list ->  statement_list statement
20: statement ->  assignment_statement
21: statement ('{') ->  '{' statement_list '}'
22: statement (WHILE) ->  WHILE '(' boolean_expr ')' statement
23: statement (IFX) ->  IF '(' boolean_expr ')' statement
24: statement (IF) ->  IF '(' boolean_expr ')' statement ELSE statement
25: statement (DO) ->  DO statement WHILE '(' boolean_expr ')' ';'
26: assignment_statement (ASSIGN) ->  variable ASSIGN arith_expression ';'
27: arith_expression ('+') ->  arith_expression '+' arith_expression
28: arith_expression ('-') ->  arith_expression '-' arith_expression
29: arith_expression ('*') ->  arith_expression '*' arith_expression
30: arith_expression ('/') ->  arith_expression '/' arith_expression
31: arith_expression ('(') ->  '(' arith_expression ')'
32: arith_expression (UMINUS) ->  '-' arith_expression
33: arith_expression ->  expression_term
34: arith_expression (SAATH) ->  boolean_expr '?' arith_expression ':' arith_expression
35: relational_expr (LE) ->  arith_expression LE arith_expression
36: relational_expr (GE) ->  arith_expression GE arith_expression
37: relational_expr (LEQ) ->  arith_expression LEQ arith_expression
38: relational_expr (GEQ) ->  arith_expression GEQ arith_expression
39: relational_expr (EQ) ->  arith_expression EQ arith_expression
40: relational_expr (NEQ) ->  arith_expression NEQ arith_expression
41: boolean_expr (OR) ->  boolean_expr OR boolean_expr
42: boolean_expr (AND) ->  boolean_expr AND boolean_expr
43: boolean_expr (NOT) ->  NOT boolean_expr
44: boolean_expr ('(') ->  '(' boolean_expr ')'
45: boolean_expr ->  relational_expr
46: expression_term ->  variable
47: expression_term ->  constant
48: variable (NAME) ->  NAME
49: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
50: constant (DOUBLE_NUMBER) ->  DOUBLE_NUMBER
51: program_$ ->  program

[parser.yy (info)] 
Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: NAME
   259: DOUBLE_NUMBER
   260: RETURN
   261: INTEGER
   262: FLOAT
   263: ASSIGN
   264: VOID
   265: IF
   266: WHILE
   267: DO
   268: SAATH
   269: OR
   270: AND
   271: EQ
   272: NEQ
   273: LE
   274: LEQ
   275: GE
   276: GEQ
    43: '+'
    45: '-'
    42: '*'
    47: '/'
   277: UMINUS
   278: NOT
    40: '('
    41: ')'
   279: IFX
   280: ELSE
    59: ';'
   123: '{'
   125: '}'
    44: ','
    63: '?'
    58: ':'

[parser.yy (info)] 
Grammar States: 
[parser.yy (info)] State 0:
51: program_$ ->  . program 
  0:   On program to state 1
  1:   On declaration_list to state 2
  2:   On procedure_declaration to state 3
  3:   On variable_declaration_list to state 4
  4:   On VOID to state 5
  5:   On variable_declaration to state 6
  6:   On declaration to state 7
  7:   On INTEGER to state 8
  8:   On FLOAT to state 9


State 1:
51: program_$ -> program  . 


State 2:
1: program -> declaration_list  . procedure_definition 
  0:   On procedure_definition to state 10
  1:   On NAME to state 11


State 3:
2: declaration_list -> procedure_declaration  . 
4: declaration_list -> procedure_declaration  . variable_declaration_list 
  0:   On variable_declaration_list to state 12
  1:   On variable_declaration to state 6
  2:   On declaration to state 7
  3:   On INTEGER to state 8
  4:   On FLOAT to state 9
  Reduce by 2: declaration_list -> procedure_declaration  . 


State 4:
3: declaration_list -> variable_declaration_list  . procedure_declaration 
12: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On procedure_declaration to state 13
  1:   On variable_declaration to state 14
  2:   On VOID to state 5
  3:   On declaration to state 7
  4:   On INTEGER to state 8
  5:   On FLOAT to state 9


State 5:
5: procedure_declaration -> VOID  . NAME '(' ')' ';' 
  0:   On NAME to state 15


State 6:
11: variable_declaration_list -> variable_declaration  . 
  Reduce by 11: variable_declaration_list -> variable_declaration  . 


State 7:
13: variable_declaration -> declaration  . ';' 
  0:   On ';' to state 16


State 8:
14: declaration -> INTEGER  . var_list 
  0:   On var_list to state 17
  1:   On NAME to state 18


State 9:
15: declaration -> FLOAT  . var_list 
  0:   On var_list to state 19
  1:   On NAME to state 18


State 10:
1: program -> declaration_list procedure_definition  . 
  Reduce by 1: program -> declaration_list procedure_definition  . 


State 11:
6: procedure_definition -> NAME  . '(' ')' #0001 '{' optional_variable_declaration_list #0002 statement_list '}' 
  0:   On '(' to state 20


State 12:
4: declaration_list -> procedure_declaration variable_declaration_list  . 
12: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 14
  1:   On declaration to state 7
  2:   On INTEGER to state 8
  3:   On FLOAT to state 9
  Reduce by 4: declaration_list -> procedure_declaration variable_declaration_list  . 


State 13:
3: declaration_list -> variable_declaration_list procedure_declaration  . 
  Reduce by 3: declaration_list -> variable_declaration_list procedure_declaration  . 


State 14:
12: variable_declaration_list -> variable_declaration_list variable_declaration  . 
  Reduce by 12: variable_declaration_list -> variable_declaration_list variable_declaration  . 


State 15:
5: procedure_declaration -> VOID NAME  . '(' ')' ';' 
  0:   On '(' to state 21


State 16:
13: variable_declaration -> declaration ';'  . 
  Reduce by 13: variable_declaration -> declaration ';'  . 


State 17:
14: declaration -> INTEGER var_list  . 
17: var_list -> var_list  . ',' NAME 
  0:   On ',' to state 22
  Reduce by 14: declaration -> INTEGER var_list  . 


State 18:
16: var_list -> NAME  . 
  Reduce by 16: var_list -> NAME  . 


State 19:
15: declaration -> FLOAT var_list  . 
17: var_list -> var_list  . ',' NAME 
  0:   On ',' to state 22
  Reduce by 15: declaration -> FLOAT var_list  . 


State 20:
6: procedure_definition -> NAME '('  . ')' #0001 '{' optional_variable_declaration_list #0002 statement_list '}' 
  0:   On ')' to state 23


State 21:
5: procedure_declaration -> VOID NAME '('  . ')' ';' 
  0:   On ')' to state 24


State 22:
17: var_list -> var_list ','  . NAME 
  0:   On NAME to state 25


State 23:
6: procedure_definition -> NAME '(' ')'  . #0001 '{' optional_variable_declaration_list #0002 statement_list '}' 
  0:   On #0001 to state 26
  Reduce by 7: #0001 ->  . 


State 24:
5: procedure_declaration -> VOID NAME '(' ')'  . ';' 
  0:   On ';' to state 27


State 25:
17: var_list -> var_list ',' NAME  . 
  Reduce by 17: var_list -> var_list ',' NAME  . 


State 26:
6: procedure_definition -> NAME '(' ')' #0001  . '{' optional_variable_declaration_list #0002 statement_list '}' 
  0:   On '{' to state 28


State 27:
5: procedure_declaration -> VOID NAME '(' ')' ';'  . 
  Reduce by 5: procedure_declaration -> VOID NAME '(' ')' ';'  . 


State 28:
6: procedure_definition -> NAME '(' ')' #0001 '{'  . optional_variable_declaration_list #0002 statement_list '}' 
  0:   On optional_variable_declaration_list to state 29
  1:   On variable_declaration_list to state 30
  2:   On variable_declaration to state 6
  3:   On declaration to state 7
  4:   On INTEGER to state 8
  5:   On FLOAT to state 9
  Reduce by 9: optional_variable_declaration_list ->  . 


State 29:
6: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list  . #0002 statement_list '}' 
  0:   On #0002 to state 31
  Reduce by 8: #0002 ->  . 


State 30:
10: optional_variable_declaration_list -> variable_declaration_list  . 
12: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 14
  1:   On declaration to state 7
  2:   On INTEGER to state 8
  3:   On FLOAT to state 9
  Reduce by 10: optional_variable_declaration_list -> variable_declaration_list  . 


State 31:
6: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002  . statement_list '}' 
  0:   On statement_list to state 32
  Reduce by 18: statement_list ->  . 


State 32:
6: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 statement_list  . '}' 
19: statement_list -> statement_list  . statement 
  0:   On '}' to state 33
  1:   On statement to state 34
  2:   On assignment_statement to state 35
  3:   On '{' to state 36
  4:   On WHILE to state 37
  5:   On IF to state 38
  6:   On DO to state 39
  7:   On variable to state 40
  8:   On NAME to state 41


State 33:
6: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 statement_list '}'  . 
  Reduce by 6: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 statement_list '}'  . 


State 34:
19: statement_list -> statement_list statement  . 
  Reduce by 19: statement_list -> statement_list statement  . 


State 35:
20: statement -> assignment_statement  . 
  Reduce by 20: statement -> assignment_statement  . 


State 36:
21: statement -> '{'  . statement_list '}' 
  0:   On statement_list to state 42
  Reduce by 18: statement_list ->  . 


State 37:
22: statement -> WHILE  . '(' boolean_expr ')' statement 
  0:   On '(' to state 43


State 38:
23: statement -> IF  . '(' boolean_expr ')' statement 
24: statement -> IF  . '(' boolean_expr ')' statement ELSE statement 
  0:   On '(' to state 44


State 39:
25: statement -> DO  . statement WHILE '(' boolean_expr ')' ';' 
  0:   On statement to state 45
  1:   On assignment_statement to state 35
  2:   On '{' to state 36
  3:   On WHILE to state 37
  4:   On IF to state 38
  5:   On DO to state 39
  6:   On variable to state 40
  7:   On NAME to state 41


State 40:
26: assignment_statement -> variable  . ASSIGN arith_expression ';' 
  0:   On ASSIGN to state 46


State 41:
48: variable -> NAME  . 
  Reduce by 48: variable -> NAME  . 


State 42:
21: statement -> '{' statement_list  . '}' 
19: statement_list -> statement_list  . statement 
  0:   On '}' to state 47
  1:   On statement to state 34
  2:   On assignment_statement to state 35
  3:   On '{' to state 36
  4:   On WHILE to state 37
  5:   On IF to state 38
  6:   On DO to state 39
  7:   On variable to state 40
  8:   On NAME to state 41


State 43:
22: statement -> WHILE '('  . boolean_expr ')' statement 
  0:   On boolean_expr to state 48
  1:   On NOT to state 49
  2:   On '(' to state 50
  3:   On relational_expr to state 51
  4:   On arith_expression to state 52
  5:   On '-' to state 53
  6:   On expression_term to state 54
  7:   On variable to state 55
  8:   On constant to state 56
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 44:
23: statement -> IF '('  . boolean_expr ')' statement 
24: statement -> IF '('  . boolean_expr ')' statement ELSE statement 
  0:   On boolean_expr to state 59
  1:   On NOT to state 49
  2:   On '(' to state 50
  3:   On relational_expr to state 51
  4:   On arith_expression to state 52
  5:   On '-' to state 53
  6:   On expression_term to state 54
  7:   On variable to state 55
  8:   On constant to state 56
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 45:
25: statement -> DO statement  . WHILE '(' boolean_expr ')' ';' 
  0:   On WHILE to state 60


State 46:
26: assignment_statement -> variable ASSIGN  . arith_expression ';' 
  0:   On arith_expression to state 61
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 47:
21: statement -> '{' statement_list '}'  . 
  Reduce by 21: statement -> '{' statement_list '}'  . 


State 48:
22: statement -> WHILE '(' boolean_expr  . ')' statement 
41: boolean_expr -> boolean_expr  . OR boolean_expr 
42: boolean_expr -> boolean_expr  . AND boolean_expr 
34: arith_expression -> boolean_expr  . '?' arith_expression ':' arith_expression 
  0:   On ')' to state 63
  1:   On OR to state 64
  2:   On AND to state 65
  3:   On '?' to state 66


State 49:
43: boolean_expr -> NOT  . boolean_expr 
  0:   On boolean_expr to state 67
  1:   On NOT to state 49
  2:   On '(' to state 50
  3:   On relational_expr to state 51
  4:   On arith_expression to state 52
  5:   On '-' to state 53
  6:   On expression_term to state 54
  7:   On variable to state 55
  8:   On constant to state 56
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 50:
44: boolean_expr -> '('  . boolean_expr ')' 
31: arith_expression -> '('  . arith_expression ')' 
  0:   On boolean_expr to state 68
  1:   On arith_expression to state 69
  2:   On NOT to state 49
  3:   On '(' to state 50
  4:   On relational_expr to state 51
  5:   On '-' to state 53
  6:   On expression_term to state 54
  7:   On variable to state 55
  8:   On constant to state 56
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 51:
45: boolean_expr -> relational_expr  . 
  Reduce by 45: boolean_expr -> relational_expr  . 


State 52:
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
  0:   On LE to state 70
  1:   On GE to state 71
  2:   On LEQ to state 72
  3:   On GEQ to state 73
  4:   On EQ to state 74
  5:   On NEQ to state 75
  6:   On '+' to state 76
  7:   On '-' to state 77
  8:   On '*' to state 78
  9:   On '/' to state 79


State 53:
32: arith_expression -> '-'  . arith_expression 
  0:   On arith_expression to state 80
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 54:
33: arith_expression -> expression_term  . 
  Reduce by 33: arith_expression -> expression_term  . 


State 55:
46: expression_term -> variable  . 
  Reduce by 46: expression_term -> variable  . 


State 56:
47: expression_term -> constant  . 
  Reduce by 47: expression_term -> constant  . 


State 57:
49: constant -> INTEGER_NUMBER  . 
  Reduce by 49: constant -> INTEGER_NUMBER  . 


State 58:
50: constant -> DOUBLE_NUMBER  . 
  Reduce by 50: constant -> DOUBLE_NUMBER  . 


State 59:
23: statement -> IF '(' boolean_expr  . ')' statement 
24: statement -> IF '(' boolean_expr  . ')' statement ELSE statement 
41: boolean_expr -> boolean_expr  . OR boolean_expr 
42: boolean_expr -> boolean_expr  . AND boolean_expr 
34: arith_expression -> boolean_expr  . '?' arith_expression ':' arith_expression 
  0:   On ')' to state 81
  1:   On OR to state 64
  2:   On AND to state 65
  3:   On '?' to state 66


State 60:
25: statement -> DO statement WHILE  . '(' boolean_expr ')' ';' 
  0:   On '(' to state 82


State 61:
26: assignment_statement -> variable ASSIGN arith_expression  . ';' 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0:   On ';' to state 83
  1:   On '+' to state 76
  2:   On '-' to state 77
  3:   On '*' to state 78
  4:   On '/' to state 79
  5:   On LE to state 70
  6:   On GE to state 71
  7:   On LEQ to state 72
  8:   On GEQ to state 73
  9:   On EQ to state 74
  10:   On NEQ to state 75


State 62:
34: arith_expression -> boolean_expr  . '?' arith_expression ':' arith_expression 
41: boolean_expr -> boolean_expr  . OR boolean_expr 
42: boolean_expr -> boolean_expr  . AND boolean_expr 
  0:   On '?' to state 66
  1:   On OR to state 64
  2:   On AND to state 65


State 63:
22: statement -> WHILE '(' boolean_expr ')'  . statement 
  0:   On statement to state 84
  1:   On assignment_statement to state 35
  2:   On '{' to state 36
  3:   On WHILE to state 37
  4:   On IF to state 38
  5:   On DO to state 39
  6:   On variable to state 40
  7:   On NAME to state 41


State 64:
41: boolean_expr -> boolean_expr OR  . boolean_expr 
  0:   On boolean_expr to state 85
  1:   On NOT to state 49
  2:   On '(' to state 50
  3:   On relational_expr to state 51
  4:   On arith_expression to state 52
  5:   On '-' to state 53
  6:   On expression_term to state 54
  7:   On variable to state 55
  8:   On constant to state 56
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 65:
42: boolean_expr -> boolean_expr AND  . boolean_expr 
  0:   On boolean_expr to state 86
  1:   On NOT to state 49
  2:   On '(' to state 50
  3:   On relational_expr to state 51
  4:   On arith_expression to state 52
  5:   On '-' to state 53
  6:   On expression_term to state 54
  7:   On variable to state 55
  8:   On constant to state 56
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 66:
34: arith_expression -> boolean_expr '?'  . arith_expression ':' arith_expression 
  0:   On arith_expression to state 87
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 67:
43: boolean_expr -> NOT boolean_expr  . 
41: boolean_expr -> boolean_expr  . OR boolean_expr 
42: boolean_expr -> boolean_expr  . AND boolean_expr 
34: arith_expression -> boolean_expr  . '?' arith_expression ':' arith_expression 
  0 (removed by precedence):   On OR to state 64
  1 (removed by precedence):   On AND to state 65
  2 (removed by precedence):   On '?' to state 66
  Reduce by 43: boolean_expr -> NOT boolean_expr  . 


State 68:
44: boolean_expr -> '(' boolean_expr  . ')' 
41: boolean_expr -> boolean_expr  . OR boolean_expr 
42: boolean_expr -> boolean_expr  . AND boolean_expr 
34: arith_expression -> boolean_expr  . '?' arith_expression ':' arith_expression 
  0:   On ')' to state 88
  1:   On OR to state 64
  2:   On AND to state 65
  3:   On '?' to state 66


State 69:
31: arith_expression -> '(' arith_expression  . ')' 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0:   On ')' to state 89
  1:   On '+' to state 76
  2:   On '-' to state 77
  3:   On '*' to state 78
  4:   On '/' to state 79
  5:   On LE to state 70
  6:   On GE to state 71
  7:   On LEQ to state 72
  8:   On GEQ to state 73
  9:   On EQ to state 74
  10:   On NEQ to state 75


State 70:
35: relational_expr -> arith_expression LE  . arith_expression 
  0:   On arith_expression to state 90
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 71:
36: relational_expr -> arith_expression GE  . arith_expression 
  0:   On arith_expression to state 91
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 72:
37: relational_expr -> arith_expression LEQ  . arith_expression 
  0:   On arith_expression to state 92
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 73:
38: relational_expr -> arith_expression GEQ  . arith_expression 
  0:   On arith_expression to state 93
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 74:
39: relational_expr -> arith_expression EQ  . arith_expression 
  0:   On arith_expression to state 94
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 75:
40: relational_expr -> arith_expression NEQ  . arith_expression 
  0:   On arith_expression to state 95
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 76:
27: arith_expression -> arith_expression '+'  . arith_expression 
  0:   On arith_expression to state 96
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 77:
28: arith_expression -> arith_expression '-'  . arith_expression 
  0:   On arith_expression to state 97
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 78:
29: arith_expression -> arith_expression '*'  . arith_expression 
  0:   On arith_expression to state 98
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 79:
30: arith_expression -> arith_expression '/'  . arith_expression 
  0:   On arith_expression to state 99
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 80:
32: arith_expression -> '-' arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0 (removed by precedence):   On '+' to state 76
  1 (removed by precedence):   On '-' to state 77
  2 (removed by precedence):   On '*' to state 78
  3 (removed by precedence):   On '/' to state 79
  4 (removed by precedence):   On LE to state 70
  5 (removed by precedence):   On GE to state 71
  6 (removed by precedence):   On LEQ to state 72
  7 (removed by precedence):   On GEQ to state 73
  8 (removed by precedence):   On EQ to state 74
  9 (removed by precedence):   On NEQ to state 75
  Reduce by 32: arith_expression -> '-' arith_expression  . 


State 81:
23: statement -> IF '(' boolean_expr ')'  . statement 
24: statement -> IF '(' boolean_expr ')'  . statement ELSE statement 
  0:   On statement to state 100
  1:   On assignment_statement to state 35
  2:   On '{' to state 36
  3:   On WHILE to state 37
  4:   On IF to state 38
  5:   On DO to state 39
  6:   On variable to state 40
  7:   On NAME to state 41


State 82:
25: statement -> DO statement WHILE '('  . boolean_expr ')' ';' 
  0:   On boolean_expr to state 101
  1:   On NOT to state 49
  2:   On '(' to state 50
  3:   On relational_expr to state 51
  4:   On arith_expression to state 52
  5:   On '-' to state 53
  6:   On expression_term to state 54
  7:   On variable to state 55
  8:   On constant to state 56
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 83:
26: assignment_statement -> variable ASSIGN arith_expression ';'  . 
  Reduce by 26: assignment_statement -> variable ASSIGN arith_expression ';'  . 


State 84:
22: statement -> WHILE '(' boolean_expr ')' statement  . 
  Reduce by 22: statement -> WHILE '(' boolean_expr ')' statement  . 


State 85:
41: boolean_expr -> boolean_expr OR boolean_expr  . 
41: boolean_expr -> boolean_expr  . OR boolean_expr 
42: boolean_expr -> boolean_expr  . AND boolean_expr 
34: arith_expression -> boolean_expr  . '?' arith_expression ':' arith_expression 
  0 (removed by precedence):   On OR to state 64
  1:   On AND to state 65
  2 (removed by precedence):   On '?' to state 66
  Reduce by 41: boolean_expr -> boolean_expr OR boolean_expr  . 


State 86:
42: boolean_expr -> boolean_expr AND boolean_expr  . 
41: boolean_expr -> boolean_expr  . OR boolean_expr 
42: boolean_expr -> boolean_expr  . AND boolean_expr 
34: arith_expression -> boolean_expr  . '?' arith_expression ':' arith_expression 
  0 (removed by precedence):   On OR to state 64
  1 (removed by precedence):   On AND to state 65
  2 (removed by precedence):   On '?' to state 66
  Reduce by 42: boolean_expr -> boolean_expr AND boolean_expr  . 


State 87:
34: arith_expression -> boolean_expr '?' arith_expression  . ':' arith_expression 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0:   On ':' to state 102
  1:   On '+' to state 76
  2:   On '-' to state 77
  3:   On '*' to state 78
  4:   On '/' to state 79
  5:   On LE to state 70
  6:   On GE to state 71
  7:   On LEQ to state 72
  8:   On GEQ to state 73
  9:   On EQ to state 74
  10:   On NEQ to state 75


State 88:
44: boolean_expr -> '(' boolean_expr ')'  . 
  Reduce by 44: boolean_expr -> '(' boolean_expr ')'  . 


State 89:
31: arith_expression -> '(' arith_expression ')'  . 
  Reduce by 31: arith_expression -> '(' arith_expression ')'  . 


State 90:
35: relational_expr -> arith_expression LE arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0:   On '+' to state 76
  1:   On '-' to state 77
  2:   On '*' to state 78
  3:   On '/' to state 79
  4:   On LE to state 70
  5:   On GE to state 71
  6:   On LEQ to state 72
  7:   On GEQ to state 73
  8:   On EQ to state 74
  9:   On NEQ to state 75
  Reduce by 35: relational_expr -> arith_expression LE arith_expression  . 


State 91:
36: relational_expr -> arith_expression GE arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0:   On '+' to state 76
  1:   On '-' to state 77
  2:   On '*' to state 78
  3:   On '/' to state 79
  4:   On LE to state 70
  5:   On GE to state 71
  6:   On LEQ to state 72
  7:   On GEQ to state 73
  8:   On EQ to state 74
  9:   On NEQ to state 75
  Reduce by 36: relational_expr -> arith_expression GE arith_expression  . 


State 92:
37: relational_expr -> arith_expression LEQ arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0:   On '+' to state 76
  1:   On '-' to state 77
  2:   On '*' to state 78
  3:   On '/' to state 79
  4:   On LE to state 70
  5:   On GE to state 71
  6:   On LEQ to state 72
  7:   On GEQ to state 73
  8:   On EQ to state 74
  9:   On NEQ to state 75
  Reduce by 37: relational_expr -> arith_expression LEQ arith_expression  . 


State 93:
38: relational_expr -> arith_expression GEQ arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0:   On '+' to state 76
  1:   On '-' to state 77
  2:   On '*' to state 78
  3:   On '/' to state 79
  4:   On LE to state 70
  5:   On GE to state 71
  6:   On LEQ to state 72
  7:   On GEQ to state 73
  8:   On EQ to state 74
  9:   On NEQ to state 75
  Reduce by 38: relational_expr -> arith_expression GEQ arith_expression  . 


State 94:
39: relational_expr -> arith_expression EQ arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0:   On '+' to state 76
  1:   On '-' to state 77
  2:   On '*' to state 78
  3:   On '/' to state 79
  4:   On LE to state 70
  5:   On GE to state 71
  6:   On LEQ to state 72
  7:   On GEQ to state 73
  8:   On EQ to state 74
  9:   On NEQ to state 75
  Reduce by 39: relational_expr -> arith_expression EQ arith_expression  . 


State 95:
40: relational_expr -> arith_expression NEQ arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0:   On '+' to state 76
  1:   On '-' to state 77
  2:   On '*' to state 78
  3:   On '/' to state 79
  4:   On LE to state 70
  5:   On GE to state 71
  6:   On LEQ to state 72
  7:   On GEQ to state 73
  8:   On EQ to state 74
  9:   On NEQ to state 75
  Reduce by 40: relational_expr -> arith_expression NEQ arith_expression  . 


State 96:
27: arith_expression -> arith_expression '+' arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0 (removed by precedence):   On '+' to state 76
  1 (removed by precedence):   On '-' to state 77
  2:   On '*' to state 78
  3:   On '/' to state 79
  4 (removed by precedence):   On LE to state 70
  5 (removed by precedence):   On GE to state 71
  6 (removed by precedence):   On LEQ to state 72
  7 (removed by precedence):   On GEQ to state 73
  8 (removed by precedence):   On EQ to state 74
  9 (removed by precedence):   On NEQ to state 75
  Reduce by 27: arith_expression -> arith_expression '+' arith_expression  . 


State 97:
28: arith_expression -> arith_expression '-' arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0 (removed by precedence):   On '+' to state 76
  1 (removed by precedence):   On '-' to state 77
  2:   On '*' to state 78
  3:   On '/' to state 79
  4 (removed by precedence):   On LE to state 70
  5 (removed by precedence):   On GE to state 71
  6 (removed by precedence):   On LEQ to state 72
  7 (removed by precedence):   On GEQ to state 73
  8 (removed by precedence):   On EQ to state 74
  9 (removed by precedence):   On NEQ to state 75
  Reduce by 28: arith_expression -> arith_expression '-' arith_expression  . 


State 98:
29: arith_expression -> arith_expression '*' arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0 (removed by precedence):   On '+' to state 76
  1 (removed by precedence):   On '-' to state 77
  2 (removed by precedence):   On '*' to state 78
  3 (removed by precedence):   On '/' to state 79
  4 (removed by precedence):   On LE to state 70
  5 (removed by precedence):   On GE to state 71
  6 (removed by precedence):   On LEQ to state 72
  7 (removed by precedence):   On GEQ to state 73
  8 (removed by precedence):   On EQ to state 74
  9 (removed by precedence):   On NEQ to state 75
  Reduce by 29: arith_expression -> arith_expression '*' arith_expression  . 


State 99:
30: arith_expression -> arith_expression '/' arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0 (removed by precedence):   On '+' to state 76
  1 (removed by precedence):   On '-' to state 77
  2 (removed by precedence):   On '*' to state 78
  3 (removed by precedence):   On '/' to state 79
  4 (removed by precedence):   On LE to state 70
  5 (removed by precedence):   On GE to state 71
  6 (removed by precedence):   On LEQ to state 72
  7 (removed by precedence):   On GEQ to state 73
  8 (removed by precedence):   On EQ to state 74
  9 (removed by precedence):   On NEQ to state 75
  Reduce by 30: arith_expression -> arith_expression '/' arith_expression  . 


State 100:
23: statement -> IF '(' boolean_expr ')' statement  . 
24: statement -> IF '(' boolean_expr ')' statement  . ELSE statement 
  0:   On ELSE to state 103
  Reduce by 23: statement -> IF '(' boolean_expr ')' statement  . 


State 101:
25: statement -> DO statement WHILE '(' boolean_expr  . ')' ';' 
41: boolean_expr -> boolean_expr  . OR boolean_expr 
42: boolean_expr -> boolean_expr  . AND boolean_expr 
34: arith_expression -> boolean_expr  . '?' arith_expression ':' arith_expression 
  0:   On ')' to state 104
  1:   On OR to state 64
  2:   On AND to state 65
  3:   On '?' to state 66


State 102:
34: arith_expression -> boolean_expr '?' arith_expression ':'  . arith_expression 
  0:   On arith_expression to state 105
  1:   On '(' to state 50
  2:   On '-' to state 53
  3:   On expression_term to state 54
  4:   On boolean_expr to state 62
  5:   On variable to state 55
  6:   On constant to state 56
  7:   On NOT to state 49
  8:   On relational_expr to state 51
  9:   On NAME to state 41
  10:   On INTEGER_NUMBER to state 57
  11:   On DOUBLE_NUMBER to state 58


State 103:
24: statement -> IF '(' boolean_expr ')' statement ELSE  . statement 
  0:   On statement to state 106
  1:   On assignment_statement to state 35
  2:   On '{' to state 36
  3:   On WHILE to state 37
  4:   On IF to state 38
  5:   On DO to state 39
  6:   On variable to state 40
  7:   On NAME to state 41


State 104:
25: statement -> DO statement WHILE '(' boolean_expr ')'  . ';' 
  0:   On ';' to state 107


State 105:
34: arith_expression -> boolean_expr '?' arith_expression ':' arith_expression  . 
27: arith_expression -> arith_expression  . '+' arith_expression 
28: arith_expression -> arith_expression  . '-' arith_expression 
29: arith_expression -> arith_expression  . '*' arith_expression 
30: arith_expression -> arith_expression  . '/' arith_expression 
35: relational_expr -> arith_expression  . LE arith_expression 
36: relational_expr -> arith_expression  . GE arith_expression 
37: relational_expr -> arith_expression  . LEQ arith_expression 
38: relational_expr -> arith_expression  . GEQ arith_expression 
39: relational_expr -> arith_expression  . EQ arith_expression 
40: relational_expr -> arith_expression  . NEQ arith_expression 
  0:   On '+' to state 76
  1:   On '-' to state 77
  2:   On '*' to state 78
  3:   On '/' to state 79
  4:   On LE to state 70
  5:   On GE to state 71
  6:   On LEQ to state 72
  7:   On GEQ to state 73
  8:   On EQ to state 74
  9:   On NEQ to state 75
  Reduce by 34: arith_expression -> boolean_expr '?' arith_expression ':' arith_expression  . 


State 106:
24: statement -> IF '(' boolean_expr ')' statement ELSE statement  . 
  Reduce by 24: statement -> IF '(' boolean_expr ')' statement ELSE statement  . 


State 107:
25: statement -> DO statement WHILE '(' boolean_expr ')' ';'  . 
  Reduce by 25: statement -> DO statement WHILE '(' boolean_expr ')' ';'  . 



